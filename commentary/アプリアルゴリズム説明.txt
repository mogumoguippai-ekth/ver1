「私の望む暮らし」アプリケーション - アルゴリズム詳細説明
==============================================================

## 1. AI目標提案アルゴリズム

### 1.1 パターン決定アルゴリズム
```
def _get_user_goal_pattern(self, user_id: str) -> int:
    # ユーザーIDのハッシュ値からパターンを決定
    hash_value = int(hashlib.md5(user_id.encode()).hexdigest(), 16)
    return hash_value % 5  # 0-4の5つのパターン
```

**処理内容：**
- ユーザーIDのハッシュ化: MD5ハッシュを使用してユーザーIDを数値化
- パターン決定: ハッシュ値を5で割った余りで0-4のパターンを決定
- 一貫性: 同じユーザーIDは常に同じパターンになる

### 1.2 5つの目標提案パターン
1. **パターン0**: 健康・ライフスタイル重視
   - 身体の健康、心の健康、社会的健康(社会参加)に焦点
   - 運動、食事、睡眠、ストレス管理などの健康要素を含む

2. **パターン1**: 社会貢献・人間関係重視
   - 社会貢献と人間関係の構築に焦点
   - ボランティア活動、コミュニティ参加、近所の人との交流、家族との時間

3. **パターン2**: 学習・スキル向上重視
   - 学習とスキル向上に焦点
   - 読書、オンライン学習、資格取得、趣味の習得

4. **パターン3**: 経済・投資・貯蓄重視
   - 経済的安定と投資や貯蓄に焦点
   - 副業、投資、専門資格、人脈構築

5. **パターン4**: 趣味・創造性重視
   - 趣味と創造性の発揮に焦点
   - 芸術、音楽、スポーツ、料理、旅行、読書など様々な趣味

### 1.3 AIプロンプト生成アルゴリズム
```
def _create_prompt(self, user_data: Dict[str, Any], user_id: str = None) -> str:
    pattern = self._get_user_goal_pattern(user_id) if user_id else 0
    template = prompt_templates[pattern]
    user_info = json.dumps(user_data, ensure_ascii=False, indent=2)
    return template.format(user_info=user_info)
```

**処理内容：**
- ユーザーIDに基づいてパターンを決定
- パターンに対応するプロンプトテンプレートを選択
- ユーザーデータをJSON形式で整形
- テンプレートとユーザーデータを結合してプロンプトを生成

## 2. データ変更検知アルゴリズム

### 2.1 データ変更判定
```
def has_data_changed(self, user_id):
    # 最新の目標作成日を取得
    goals_created = self._parse_datetime(goals_result[0])
    
    # 各テーブルの更新日をチェック
    if user_updated > goals_created: return True
    if profile_updated > goals_created: return True  
    if iwlm_updated > goals_created: return True
    
    return False
```

**処理内容：**
- 最新の目標作成日時を取得
- users、profiles、iwlmテーブルの最終更新日時をチェック
- 目標作成日時より新しい更新があれば変更ありと判定

### 2.2 自動更新トリガー
- **情報更新時**: プロフィールや暮らし情報が変更された場合
- **90日間隔**: 定期的な目標見直し（現在は常にTrueに設定）
- **家族ユーザー**: AI実行を無効化（閲覧のみ）

## 3. ユーザー管理アルゴリズム

### 3.1 二重ユーザーシステム
```
# 本人ユーザー
user_type = "self"  # 全機能利用可能

# 家族ユーザー  
user_type = "family"  # 閲覧・印刷のみ
parent_user_id = "親のユーザーID"
```

**特徴：**
- 本人ユーザー: 全機能（登録、編集、削除、AI目標生成）利用可能
- 家族ユーザー: 閲覧・印刷機能のみ、最大3名まで招待可能
- 招待コード制: セキュリティを考慮した家族登録システム

### 3.2 招待コード生成アルゴリズム
```
def generate_invitation_code(self, user_id):
    # 8桁のランダムな数字を生成
    code = str(random.randint(10000000, 99999999))
    # 30分間有効
    expires_at = datetime.now() + timedelta(minutes=30)
    return code, expires_at
```

**処理内容：**
- 8桁のランダム数字を生成
- 30分間の有効期限を設定
- 使用済みフラグで管理
- 期限切れまたは使用済みのコードは無効

## 4. データベース最適化アルゴリズム

### 4.1 同時アクセス対応
```
def get_connection(self):
    conn = sqlite3.connect(self.db_path, timeout=30.0)
    # WALモードを有効にして同時アクセスを改善
    conn.execute("PRAGMA journal_mode=WAL")
    # ロックタイムアウトを設定
    conn.execute("PRAGMA busy_timeout=30000")  # 30秒
    return conn
```

**最適化内容：**
- WALモード: 読み取りと書き込みの同時実行を可能にする
- ロックタイムアウト: 30秒でタイムアウト設定
- 接続タイムアウト: 30秒で接続タイムアウト設定

### 4.2 データ整合性保証
```
def save_user_goals_check(self, user_id, goals_data):
    # 最新の目標と比較して重複チェック
    if latest_goal and latest_goal[0] == long_term_goal:
        return None  # 重複のため保存しない
```

**処理内容：**
- 重複チェック付き保存: 同じ内容の目標は保存しない
- 強制保存: データ変更時は重複チェックをスキップ
- タイムスタンプ管理: データ変更の追跡

## 5. 画像処理アルゴリズム

### 5.1 プライバシー保護
```
def remove_exif_data(image_path):
    with Image.open(image_path) as img:
        # EXIFデータを削除した新しい画像を作成
        data = list(img.getdata())
        image_without_exif = Image.new(img.mode, img.size)
        image_without_exif.putdata(data)
        image_without_exif.save(image_path)
```

**処理内容：**
- EXIFデータ削除: 位置情報などの個人情報を自動削除
- 画像データのみ抽出: メタデータを除去
- プライバシー保護: 位置情報漏洩を防止

### 5.2 画像最適化
```
def resize_image(image_path, output_path, max_width=1200, max_height=800):
    with Image.open(image_path) as img:
        img.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)
        img.save(output_path, optimize=True, quality=85)
```

**処理内容：**
- リサイズ: 最大1200x800ピクセルに縮小
- サムネイル作成: 200x150ピクセルのサムネイルを生成
- 品質最適化: 85%の品質でファイルサイズを削減
- LANCZOS補間: 高品質なリサイズ処理

## 6. フォールバックアルゴリズム

### 6.1 AI失敗時の対応
```
def generate_goals(self, user_data, profile_data, iwlm_data, user_id):
    try:
        # AIを使用して目標生成
        return ai_generated_goals
    except Exception as e:
        # フォールバック: 従来の固定ロジックで目標を生成
        return self._get_fallback_goals(user_id)
```

**処理内容：**
- 例外処理: AI API呼び出し失敗時の対応
- フォールバック: 事前定義された目標パターンを使用
- ログ出力: エラー情報の記録
- 継続性: システム停止を防ぐ

### 6.2 パターン別フォールバック目標
各パターンに対応したデフォルト目標を事前定義：
- パターン0: 健康で充実した毎日を送り、規則正しい生活リズムを確立
- パターン1: 地域社会に貢献しながら、家族や友人との絆を深める
- パターン2: 継続的な学習を通じて新しい知識とスキルを身につける
- パターン3: 経済的な安定を築きながら、自分の専門性を高める
- パターン4: 自分らしい趣味や創造的な活動を通じて豊かな心の世界を築く

## 7. セキュリティアルゴリズム

### 7.1 パスワードハッシュ化
```
# 登録時
hashed_password = generate_password_hash(password)

# 認証時
if check_password_hash(user[3], password):
    # ログイン成功
```

**処理内容：**
- Werkzeugのハッシュ化機能を使用
- ソルト付きハッシュ化でセキュリティ強化
- 平文パスワードは一切保存しない

### 7.2 アクセス制御
```
@self_user_required
def update_profile():
    # 本人ユーザーのみアクセス可能
    if session.get("user_type") != "self":
        flash("この機能は本人ユーザーのみ利用できます。")
        return redirect(url_for("dashboard"))
```

**処理内容：**
- デコレーターによる機能制限
- ユーザータイプ別アクセス制御
- セッション管理による認証状態確認

## 8. アルゴリズムの特徴

### 8.1 決定論的設計
- **一貫性**: 同じ入力に対して常に同じ結果
- **再現性**: ユーザーIDに基づく固定パターン
- **予測可能性**: アルゴリズムの動作が明確

### 8.2 堅牢性
- **フォールバック対応**: AI失敗時の代替手段を用意
- **例外処理**: エラー時の適切な処理
- **継続性**: システム停止を防ぐ設計

### 8.3 データ整合性
- **重複防止**: 同じ内容の目標が重複保存されない
- **タイムスタンプ管理**: データ変更の正確な追跡
- **トランザクション管理**: データベース操作の整合性保証

### 8.4 プライバシー保護
- **EXIF削除**: 画像の位置情報自動削除
- **アクセス制御**: ユーザータイプ別の機能制限
- **データ最小化**: 必要最小限の情報のみ保存

### 8.5 スケーラビリティ
- **同時アクセス対応**: WALモードとタイムアウト設定
- **効率的なデータベース操作**: 最適化されたクエリ
- **メモリ効率**: 適切なリソース管理

### 8.6 個人化
- **ユーザーIDベースのパターン決定**: 個人に最適化された目標提案
- **データ駆動型**: ユーザー情報に基づく動的目標生成
- **継続的改善**: データ変更に応じた目標更新

## 9. アルゴリズムフロー

### 9.1 目標生成フロー
1. ユーザーIDからパターン決定（MD5ハッシュ）
2. ユーザーデータ（基本情報、プロフィール、暮らし情報）取得
3. データ変更検知（タイムスタンプ比較）
4. AI API呼び出し（パターン別プロンプト使用）
5. レスポンス解析と構造化
6. 重複チェック付きデータベース保存
7. 失敗時はフォールバック目標を使用

### 9.2 ユーザー管理フロー
1. 本人ユーザー登録
2. 招待コード生成（8桁、30分有効）
3. 家族ユーザー登録（招待コード必須）
4. ユーザータイプ別アクセス制御
5. 最大3名の家族ユーザー管理

### 9.3 データ更新フロー
1. ユーザー情報更新
2. タイムスタンプ更新
3. データ変更フラグ設定
4. 目標更新トリガー
5. AI目標再生成
6. 新目標の保存

このアルゴリズム設計により、ユーザーの情報に基づいた個別化された目標提案を実現しながら、システムの安定性、セキュリティ、プライバシー保護を確保しています。
